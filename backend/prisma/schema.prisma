// Smart Cashless Hub - Database Schema
// Starting with core entities: Tenant, User, Event

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER ROLES
// ============================================================================

enum UserRole {
  SUPERADMIN // Smart Cashless staff - manages all tenants
  TENANT_ADMIN // Tenant owner - full access to tenant and events
  TENANT_STAFF // Tenant staff - limited access to dashboard
  END_USER // Final customer - uses the mobile app
}

// ============================================================================
// TENANT (B2B Client)
// ============================================================================

model Tenant {
  id          String  @id @default(cuid())
  name        String // Example: "Club Beso"
  slug        String  @unique // URL-friendly identifier
  description String?

  // Contact information
  contactEmail String?
  contactPhone String?

  // Status
  isActive Boolean @default(true)

  // Metadata (JSON for flexibility)
  // Example: { "logo": "url", "primaryColor": "#FF5733", "settings": {...} }
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users    TenantUser[] // Users who have access to this tenant
  events   Event[] // Events created by this tenant
  payments Payment[] // Payments for this tenant

  @@map("tenants")
}

// ============================================================================
// USER (End User + Tenant Staff)
// ============================================================================

model User {
  id String @id @default(cuid())

  // Basic info
  email     String  @unique
  firstName String?
  lastName  String?
  phone     String?

  // Authentication
  password String // Hashed password with bcrypt
  mustChangePassword Boolean @default(false) // Force password change on first login
  djangoUserId String? @unique // Optional: reference to Django user ID for migration

  // Global role (primarily for SUPERADMIN)
  globalRole UserRole @default(END_USER)

  // Status
  isActive Boolean @default(true)

  // Metadata (JSON for flexibility)
  // Example: { "avatar": "url", "preferences": {...} }
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenants           TenantUser[]         // Tenants this user has access to (with specific roles)
  payments          Payment[]            // Payments made by this user
  packagePurchases  PackagePurchase[]    // Packages purchased by this user
  rewardRedemptions RewardRedemption[]   // Rewards redeemed by this user

  @@index([email])
  @@index([djangoUserId])
  @@index([globalRole])
  @@map("users")
}

// ============================================================================
// TENANT-USER RELATIONSHIP (Many-to-Many with role)
// ============================================================================

model TenantUser {
  id String @id @default(cuid())

  // User role within THIS specific tenant
  role UserRole @default(END_USER)

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tenantId]) // A user can only have one role per tenant
  @@index([userId])
  @@index([tenantId])
  @@index([role])
  @@map("tenant_users")
}

// ============================================================================
// EVENT (Created by Tenant)
// ============================================================================

enum EventStatus {
  DRAFT // Event is being configured
  SCHEDULED // Event is scheduled for the future
  ACTIVE // Event is currently happening
  COMPLETED // Event has ended
  CANCELLED // Event was cancelled
}

model Event {
  id          String  @id @default(cuid())
  name        String
  description String?

  // Location
  location String
  address  String?

  // Date and time
  startDate DateTime
  endDate   DateTime

  // Status
  status EventStatus @default(DRAFT)

  // Capacity
  capacity Int? // Maximum attendees (null = unlimited)

  // Images
  images String[] @default([]) // Array of image URLs for event gallery

  // Tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Configuration (JSON for flexibility)
  // Example: {
  //   "theme": "night-club",
  //   "settings": { "allowGuestList": true, "requireVerification": false },
  //   "features": ["loyalty", "notifications"]
  // }
  config Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  payments          Payment[]            // Payments made for this event
  packages          Package[]            // Packages available for this event
  packagePurchases  PackagePurchase[]    // Package purchases for this event
  rewards           Reward[]             // Rewards available for this event
  rewardRedemptions RewardRedemption[]   // Reward redemptions for this event

  @@index([tenantId])
  @@index([status])
  @@index([startDate, endDate])
  @@map("events")
}

// ============================================================================
// PAYMENT (Mirrored from Django)
// ============================================================================

enum PaymentStatus {
  PENDING // Payment initiated but not yet confirmed
  COMPLETED // Payment successfully processed
  REFUNDED // Payment was refunded
}

enum PaymentMethod {
  BRACELET // Cashless bracelet/wristband (main method)
  CARD // Credit/Debit card
  CASH // Cash payment
  WALLET // Digital wallet (e.g., Apple Pay, Google Pay)
  TRANSFER // Bank transfer
  OTHER // Other payment methods
}

model Payment {
  id String @id @default(cuid())

  // Amount
  amount   Decimal @db.Decimal(10, 2) // e.g., 25.50
  currency String  @default("EUR") // ISO currency code

  // Payment details
  paymentMethod PaymentMethod
  status        PaymentStatus @default(PENDING)

  // Django integration
  djangoPaymentId String? @unique // Payment ID from Django for sync

  // Relations
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Metadata (JSON for flexibility)
  // Example: {
  //   "description": "Entry ticket + 2 drinks",
  //   "items": [{"name": "Entry", "price": 10}, {"name": "Drink", "price": 7.75, "quantity": 2}],
  //   "braceletId": "BR123456"
  // }
  metadata Json?

  // Timestamps
  paidAt    DateTime? // When the payment was completed (null if still PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([eventId])
  @@index([userId])
  @@index([tenantId])
  @@index([status])
  @@index([paymentMethod])
  @@index([paidAt])
  @@index([djangoPaymentId])
  @@map("payments")
}

// ============================================================================
// PACKAGES SYSTEM (Pre-event purchasable products)
// ============================================================================

enum PackageStatus {
  DRAFT // Package is being configured
  ACTIVE // Package is available for purchase
  INACTIVE // Package is temporarily disabled
  EXPIRED // Sales period has ended
  SOLD_OUT // All available stock has been sold
}

enum PackageItemType {
  ENTRY // Event entry ticket
  BRACELET // Cashless bracelet with preloaded amount
  MERCHANDISE // Physical merchandise (t-shirts, etc.)
  SERVICE // Additional services (VIP access, etc.)
}

enum PurchaseStatus {
  PENDING // Purchase initiated but payment not confirmed
  COMPLETED // Purchase successfully processed
  CANCELLED // Purchase was cancelled
  REFUNDED // Purchase was refunded
  EXPIRED // Purchase expired (not used within validity period)
}

model Package {
  id          String        @id @default(cuid())
  name        String // e.g., "Early Bird VIP Package"
  description String? // Detailed description of what's included

  status PackageStatus @default(DRAFT)

  // Pricing (with discount support)
  originalPrice Decimal? @db.Decimal(10, 2) // e.g., 10€ (shown crossed out)
  price         Decimal  @db.Decimal(10, 2) // e.g., 8€ (actual sale price)

  // Stock management
  maxQuantity  Int? // Total available (null = unlimited)
  soldQuantity Int  @default(0) // Number already sold
  maxPerUser   Int? @default(1) // Maximum purchases per user

  // Sales period
  saleStartDate DateTime? // When sales open (null = immediately)
  saleEndDate   DateTime? // When sales close (null = no end)

  // Relations
  eventId  String
  event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  // Tenant reference (for security and multi-tenancy, no direct relation)
  tenantId String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items     PackageItem[]
  purchases PackagePurchase[]

  @@index([eventId])
  @@index([tenantId])
  @@index([status])
  @@index([saleStartDate, saleEndDate])
  @@map("packages")
}

model PackageItem {
  id          String          @id @default(cuid())
  name        String // e.g., "Entry Ticket", "Bracelet 50€"
  description String? // Additional details
  type        PackageItemType
  quantity    Int             @default(1) // How many of this item are included

  // For BRACELET type: preloaded amount
  braceletAmount Decimal? @db.Decimal(10, 2) // e.g., 50.00 for a bracelet with €50

  // Metadata for additional configuration
  metadata Json?

  // Relations
  packageId String
  package   Package @relation(fields: [packageId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([packageId])
  @@index([type])
  @@map("package_items")
}

model PackagePurchase {
  id String @id @default(cuid())

  // Purchase status
  status PurchaseStatus @default(PENDING)

  // Amount paid
  amount         Decimal @db.Decimal(10, 2)
  finalAmount    Decimal @db.Decimal(10, 2) // Amount after any discount
  discountAmount Decimal? @db.Decimal(10, 2) // Discount applied
  currency       String  @default("EUR")

  // Payment details
  paymentMethod PaymentMethod?
  paymentId     String? // Reference to external payment if applicable

  // Django integration for bracelets
  djangoBraceletIds String[] @default([]) // Array of bracelet IDs activated in Django
  activatedAt       DateTime? // When bracelets were activated

  // Relations
  packageId String
  package   Package @relation(fields: [packageId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  // Tenant reference (for security and multi-tenancy, no direct relation)
  tenantId String

  // Metadata for additional data (items snapshot, etc.)
  metadata Json?

  // Timestamps
  purchasedAt DateTime? // When payment was completed
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([packageId])
  @@index([userId])
  @@index([tenantId])
  @@index([eventId])
  @@index([status])
  @@index([purchasedAt])
  @@map("package_purchases")
}

// ============================================================================
// REWARDS SYSTEM (Event-based automatic promotions)
// ============================================================================

enum RewardStatus {
  DRAFT // Reward is being configured
  ACTIVE // Reward is currently checking for qualifications
  INACTIVE // Reward is temporarily disabled
  EXPIRED // Time period has ended
  DEPLETED // All redemptions used up
}

enum RewardTriggerType {
  MINIMUM_SPEND // User spends X amount
  TRANSACTION_COUNT // User makes X transactions
  SPECIFIC_ITEMS // User purchases specific items (future)
}

enum RewardType {
  RECHARGE // Add money to bracelet
  DISCOUNT_PERCENTAGE // Percentage off next purchase (future)
  FREE_ITEM // Specific free product (future)
}

model Reward {
  id          String       @id @default(cuid())
  name        String // e.g., "Spend 150€ Get 10€ Free"
  description String? // Detailed description

  status RewardStatus @default(DRAFT)

  // Trigger conditions
  triggerType         RewardTriggerType // What triggers this reward
  minimumSpend        Decimal?          @db.Decimal(10, 2) // e.g., 150€
  minimumTransactions Int? // Alternative trigger: number of transactions

  // Reward (what user gets)
  rewardType   RewardType // Type of reward
  rewardAmount Decimal?   @db.Decimal(10, 2) // e.g., 10€ recharge

  // Redemption limits
  maxRedemptionsPerUser Int? @default(1) // How many times can one user claim?
  maxTotalRedemptions   Int? // Global limit across all users
  currentRedemptions    Int  @default(0) // Counter

  // Active period (during event)
  activeFrom  DateTime? // When reward becomes available (null = immediately)
  activeUntil DateTime? // When reward expires (null = no expiration)

  // Relations
  eventId  String
  event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  // Tenant reference (for security and multi-tenancy, no direct relation)
  tenantId String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  redemptions RewardRedemption[]

  @@index([eventId])
  @@index([tenantId])
  @@index([status])
  @@index([activeFrom, activeUntil])
  @@map("rewards")
}

model RewardRedemption {
  id String @id @default(cuid())

  // What triggered it
  triggerAmount       Decimal? @db.Decimal(10, 2) // User's spend at trigger time
  triggerTransactions Int? // Transaction count at trigger

  // What they received
  rewardAmount Decimal @db.Decimal(10, 2) // Actual amount given

  // Django integration (if reward adds to bracelet)
  djangoBraceletId String? // Bracelet that received the reward
  appliedAt        DateTime? // When reward was actually applied to bracelet

  // Relations
  rewardId String
  reward   Reward @relation(fields: [rewardId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  // Tenant reference (for security and multi-tenancy, no direct relation)
  tenantId String

  // Metadata for additional data
  metadata Json?

  // Timestamps
  qualifiedAt DateTime @default(now()) // When user met the criteria
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([rewardId])
  @@index([userId])
  @@index([eventId])
  @@index([tenantId])
  @@index([qualifiedAt])
  @@map("reward_redemptions")
}
