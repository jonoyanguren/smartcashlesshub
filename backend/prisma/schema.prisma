// Smart Cashless Hub - Database Schema
// Starting with core entities: Tenant, User, Event

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER ROLES
// ============================================================================

enum UserRole {
  SUPERADMIN // Smart Cashless staff - manages all tenants
  TENANT_ADMIN // Tenant owner - full access to tenant and events
  TENANT_STAFF // Tenant staff - limited access to dashboard
  END_USER // Final customer - uses the mobile app
}

// ============================================================================
// TENANT (B2B Client)
// ============================================================================

model Tenant {
  id          String  @id @default(cuid())
  name        String // Example: "Club Beso"
  slug        String  @unique // URL-friendly identifier
  description String?

  // Contact information
  contactEmail String?
  contactPhone String?

  // Status
  isActive Boolean @default(true)

  // Metadata (JSON for flexibility)
  // Example: { "logo": "url", "primaryColor": "#FF5733", "settings": {...} }
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users    TenantUser[] // Users who have access to this tenant
  events   Event[] // Events created by this tenant
  payments Payment[] // Payments for this tenant

  @@map("tenants")
}

// ============================================================================
// USER (End User + Tenant Staff)
// ============================================================================

model User {
  id String @id @default(cuid())

  // Basic info
  email     String  @unique
  firstName String?
  lastName  String?
  phone     String?

  // Authentication
  password String // Hashed password with bcrypt
  mustChangePassword Boolean @default(false) // Force password change on first login
  djangoUserId String? @unique // Optional: reference to Django user ID for migration

  // Global role (primarily for SUPERADMIN)
  globalRole UserRole @default(END_USER)

  // Status
  isActive Boolean @default(true)

  // Metadata (JSON for flexibility)
  // Example: { "avatar": "url", "preferences": {...} }
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenants        TenantUser[]     // Tenants this user has access to (with specific roles)
  payments       Payment[]        // Payments made by this user
  offerPurchases OfferPurchase[]  // Offers purchased by this user

  @@index([email])
  @@index([djangoUserId])
  @@index([globalRole])
  @@map("users")
}

// ============================================================================
// TENANT-USER RELATIONSHIP (Many-to-Many with role)
// ============================================================================

model TenantUser {
  id String @id @default(cuid())

  // User role within THIS specific tenant
  role UserRole @default(END_USER)

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tenantId]) // A user can only have one role per tenant
  @@index([userId])
  @@index([tenantId])
  @@index([role])
  @@map("tenant_users")
}

// ============================================================================
// EVENT (Created by Tenant)
// ============================================================================

enum EventStatus {
  DRAFT // Event is being configured
  SCHEDULED // Event is scheduled for the future
  ACTIVE // Event is currently happening
  COMPLETED // Event has ended
  CANCELLED // Event was cancelled
}

model Event {
  id          String  @id @default(cuid())
  name        String
  description String?

  // Location
  location String
  address  String?

  // Date and time
  startDate DateTime
  endDate   DateTime

  // Status
  status EventStatus @default(DRAFT)

  // Capacity
  capacity Int? // Maximum attendees (null = unlimited)

  // Images
  images String[] @default([]) // Array of image URLs for event gallery

  // Tenant relation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Configuration (JSON for flexibility)
  // Example: {
  //   "theme": "night-club",
  //   "settings": { "allowGuestList": true, "requireVerification": false },
  //   "features": ["loyalty", "notifications"]
  // }
  config Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  payments       Payment[]        // Payments made for this event
  offers         Offer[]          // Offers available for this event
  offerPurchases OfferPurchase[]  // Offer purchases for this event

  @@index([tenantId])
  @@index([status])
  @@index([startDate, endDate])
  @@map("events")
}

// ============================================================================
// PAYMENT (Mirrored from Django)
// ============================================================================

enum PaymentStatus {
  PENDING // Payment initiated but not yet confirmed
  COMPLETED // Payment successfully processed
  REFUNDED // Payment was refunded
}

enum PaymentMethod {
  BRACELET // Cashless bracelet/wristband (main method)
  CARD // Credit/Debit card
  CASH // Cash payment
  WALLET // Digital wallet (e.g., Apple Pay, Google Pay)
  TRANSFER // Bank transfer
  OTHER // Other payment methods
}

model Payment {
  id String @id @default(cuid())

  // Amount
  amount   Decimal @db.Decimal(10, 2) // e.g., 25.50
  currency String  @default("EUR") // ISO currency code

  // Payment details
  paymentMethod PaymentMethod
  status        PaymentStatus @default(PENDING)

  // Django integration
  djangoPaymentId String? @unique // Payment ID from Django for sync

  // Relations
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Metadata (JSON for flexibility)
  // Example: {
  //   "description": "Entry ticket + 2 drinks",
  //   "items": [{"name": "Entry", "price": 10}, {"name": "Drink", "price": 7.75, "quantity": 2}],
  //   "braceletId": "BR123456"
  // }
  metadata Json?

  // Timestamps
  paidAt    DateTime? // When the payment was completed (null if still PENDING)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([eventId])
  @@index([userId])
  @@index([tenantId])
  @@index([status])
  @@index([paymentMethod])
  @@index([paidAt])
  @@index([djangoPaymentId])
  @@map("payments")
}

// ============================================================================
// OFFERS & PACKAGES SYSTEM
// ============================================================================

enum OfferType {
  BUNDLE // Package deals (entry + bracelets + items)
  EARLY_BIRD // Time-limited discount on offer purchase
  DISCOUNT_PERCENTAGE // Percentage discount on consumptions during event
}

enum OfferStatus {
  DRAFT // Offer is being configured
  ACTIVE // Offer is available for purchase
  INACTIVE // Offer is temporarily disabled
  EXPIRED // Offer validity period has ended
  SOLD_OUT // All available stock has been sold
}

enum OfferItemType {
  ENTRY // Event entry ticket
  BRACELET // Cashless bracelet with preloaded amount
  VOUCHER // Discount voucher for consumptions
  MERCHANDISE // Physical merchandise (t-shirts, etc.)
  SERVICE // Additional services (VIP access, etc.)
}

enum PurchaseStatus {
  PENDING // Purchase initiated but payment not confirmed
  COMPLETED // Purchase successfully processed
  CANCELLED // Purchase was cancelled
  REFUNDED // Purchase was refunded
  EXPIRED // Purchase expired (not used within validity period)
}

model Offer {
  id          String      @id @default(cuid())
  name        String // e.g., "Early Bird VIP Package"
  description String? // Detailed description of what's included

  // Offer type and status
  type   OfferType
  status OfferStatus @default(DRAFT)

  // Pricing
  originalPrice      Decimal? @db.Decimal(10, 2) // Original price (for early bird/discounts)
  price              Decimal  @db.Decimal(10, 2) // Final price
  discountPercentage Decimal? @db.Decimal(5, 2) // For DISCOUNT_PERCENTAGE type (e.g., 10.00 = 10%)

  // Stock and purchase limits
  maxQuantity     Int? // Maximum number of offers available (null = unlimited)
  soldQuantity    Int      @default(0) // Number already sold
  maxPerUser      Int?     @default(1) // Maximum purchases per user (null = unlimited)

  // Validity period
  validFrom  DateTime? // When the offer becomes available (null = immediately)
  validUntil DateTime? // When the offer expires (null = no expiration)

  // Relations
  eventId  String
  event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  // Tenant reference (for security and multi-tenancy, no direct relation)
  tenantId String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items     OfferItem[]
  purchases OfferPurchase[]

  @@index([eventId])
  @@index([tenantId])
  @@index([status])
  @@index([type])
  @@index([validFrom, validUntil])
  @@map("offers")
}

model OfferItem {
  id          String        @id @default(cuid())
  name        String // e.g., "Entry Ticket", "Bracelet 50â‚¬"
  description String? // Additional details
  type        OfferItemType
  quantity    Int           @default(1) // How many of this item are included

  // For BRACELET type: preloaded amount
  braceletAmount Decimal? @db.Decimal(10, 2) // e.g., 50.00 for a bracelet with â‚¬50

  // For VOUCHER type: discount details
  voucherDiscount Decimal? @db.Decimal(5, 2) // Percentage discount (e.g., 15.00 = 15%)

  // Metadata for additional configuration
  metadata Json?

  // Relations
  offerId String
  offer   Offer  @relation(fields: [offerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([offerId])
  @@index([type])
  @@map("offer_items")
}

model OfferPurchase {
  id String @id @default(cuid())

  // Purchase status
  status PurchaseStatus @default(PENDING)

  // Amount paid
  amount   Decimal @db.Decimal(10, 2)
  currency String  @default("EUR")

  // Discount applied (if EARLY_BIRD or special promo)
  discountAmount Decimal? @db.Decimal(10, 2)
  finalAmount    Decimal  @db.Decimal(10, 2) // Amount after discount

  // Payment details
  paymentMethod PaymentMethod?
  paymentId     String? // Reference to Payment model if applicable

  // Django integration for bracelets
  djangoBraceletIds String[] @default([]) // Array of bracelet IDs activated in Django
  activatedAt       DateTime? // When bracelets were activated

  // Relations
  offerId String
  offer   Offer  @relation(fields: [offerId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  // Tenant reference (for security and multi-tenancy, no direct relation)
  tenantId String

  // Metadata for additional data (items snapshot, etc.)
  metadata Json?

  // Timestamps
  purchasedAt DateTime? // When payment was completed
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([offerId])
  @@index([userId])
  @@index([tenantId])
  @@index([eventId])
  @@index([status])
  @@index([purchasedAt])
  @@map("offer_purchases")
}
